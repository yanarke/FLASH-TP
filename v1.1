-- Portal Gun (LocalScript) - Version corrigée
-- À placer dans un Tool nommé "PortalGun" dans StarterPack

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local tool = script.Parent
local mouse

-- Config
local PORTAL_DISTANCE_CLONE = 80
local PORTAL_SIZE = Vector3.new(4, 6, 0.2)
local VIEWPORT_UPDATE_RATE = 0.033
local TELEPORT_OFFSET = Vector3.new(0, 3, 0)
local TELEPORT_COOLDOWN = 0.5

-- Portails stockés
local portals = { red = nil, blue = nil }
local lastTeleport = 0
local nextColor = "blue" -- Premier tir : bleu

-- Helper : créer un portail
local function createPortalPart(pos, normal, color)
	local p = Instance.new("Part")
	p.Size = PORTAL_SIZE
	p.Anchored = true
	p.CanCollide = false
	p.Material = Enum.Material.SmoothPlastic
	p.Transparency = 1
	p.CFrame = CFrame.lookAt(pos, pos + normal)

	local outline = Instance.new("SelectionBox")
	outline.Adornee = p
	outline.LineThickness = 0.02
	outline.SurfaceTransparency = 0.7
	outline.Color3 = color
	outline.Parent = p

	local surface = Instance.new("SurfaceGui")
	surface.Face = Enum.NormalId.Front
	surface.AlwaysOnTop = true
	surface.SizingMode = Enum.SurfaceGuiSizingMode.PixelsPerStud
	surface.Parent = p

	local vp = Instance.new("ViewportFrame")
	vp.Size = UDim2.new(1, 0, 1, 0)
	vp.BackgroundTransparency = 1
	vp.Parent = surface

	return p, vp
end

-- Créer clones visibles dans le ViewportFrame (simple démo)
local function populateViewportFromPortal(portal)
	if not portal or not portal.Part or not portal.ViewportFrame then return end
	local pos = portal.Part.Position
	local clonesRoot = Instance.new("Folder")
	clonesRoot.Name = "PortalClones"
	clonesRoot.Parent = portal.ViewportFrame

	for _, obj in ipairs(workspace:GetDescendants()) do
		if obj:IsA("BasePart") and obj.CanCollide and (obj.Position - pos).Magnitude <= PORTAL_DISTANCE_CLONE then
			local clone
			pcall(function()
				clone = obj:Clone()
			end)
			if clone then
				clone.Anchored = true
				clone:SetAttribute("origCFrame", obj.CFrame)
				clone.Parent = clonesRoot
			end
		end
	end
	return clonesRoot
end

-- Synchronise les clones avec leur original
local function updateClones(portal)
	if not portal or not portal.clonesFolder then return end
	if not portal.Other or not portal.Other.Part then return end

	local fromCF = portal.Part.CFrame
	local toCF = portal.Other.Part.CFrame

	for _, clone in ipairs(portal.clonesFolder:GetChildren()) do
		local orig = clone:GetAttribute("origCFrame")
		if orig then
			local mapped = toCF * (fromCF:Inverse() * orig)
			clone.CFrame = mapped
		end
	end
end

-- Création et placement d’un portail
local function placePortal(colorName, color3, hitPos, hitNormal)
	if portals[colorName] and portals[colorName].Part then
		portals[colorName].Part:Destroy()
		portals[colorName] = nil
	end

	local part, vp = createPortalPart(hitPos, hitNormal, color3)
	part.Parent = workspace

	local cam = Instance.new("Camera")
	cam.Parent = vp

	local portalData = {
		Part = part,
		Color = color3,
		ViewportFrame = vp,
		Camera = cam,
		clonesFolder = nil
	}
	portals[colorName] = portalData

	local otherName = (colorName == "red" and "blue" or "red")
	if portals[otherName] and portals[otherName].Part then
		portals[colorName].Other = portals[otherName]
		portals[otherName].Other = portals[colorName]
	end

	portalData.clonesFolder = populateViewportFromPortal(portalData)

	-- Téléportation
	part.Touched:Connect(function(otherPart)
		if not player.Character then return end
		local hrp = player.Character:FindFirstChild("HumanoidRootPart")
		if not hrp then return end
		if not (otherPart == hrp or otherPart:IsDescendantOf(player.Character)) then return end
		if tick() - lastTeleport < TELEPORT_COOLDOWN then return end
		lastTeleport = tick()

		if not portalData.Other or not portalData.Other.Part then return end

		local fromCF = portalData.Part.CFrame
		local toCF = portalData.Other.Part.CFrame

		local rel = fromCF:Inverse() * hrp.CFrame
		local targetCF = toCF * rel + TELEPORT_OFFSET

		hrp.CFrame = targetCF
	end)

	return portalData
end

-- Boucle de mise à jour
RunService.RenderStepped:Connect(function(dt)
	for _, p in pairs(portals) do
		if p and p.Part and p.Other and p.Other.Part then
			updateClones(p)
		end
	end
end)

-- Gestion souris (activation du tir)
tool.Equipped:Connect(function(m)
	mouse = m
end)

tool.Activated:Connect(function()
	if not mouse then return end
	local target = mouse.Hit
	if not target then return end

	local pos = target.Position
	local cam = workspace.CurrentCamera
	local dir = (pos - cam.CFrame.Position).Unit

	nextColor = (nextColor == "red") and "blue" or "red"
	local color3 = (nextColor == "red") and Color3.fromRGB(255, 80, 80) or Color3.fromRGB(90, 140, 255)

	placePortal(nextColor, color3, pos, -dir)
end)

-- Nettoyage
tool.AncestryChanged:Connect(function(_, parent)
	if not parent then
		for _, p in pairs(portals) do
			if p and p.Part then p.Part:Destroy() end
		end
	end
end)
