-- Portal System (Client-side version)
-- √Ä mettre dans StarterPlayerScripts (pas besoin de Tool)
-- G√®re : clic gauche pour tirer, portails rouge/bleu, orientation mur/sol, Viewport all√©g√© + panneau UI

-- üîß Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")
local UserInputService = game:GetService("UserInputService")
local player = Players.LocalPlayer
local camera = workspace.CurrentCamera

-- ‚öôÔ∏è Param√®tres
local PORTAL_SIZE = Vector3.new(4, 6, 0.2)
local TELEPORT_OFFSET = Vector3.new(0, 3, 0)
local TELEPORT_COOLDOWN = 0.5
local VIEW_CLONE_RADIUS = 50
local VIEW_CLONE_MAX = 20
local VIEW_UPDATE_RATE = 0.05

local portals = { red = nil, blue = nil }
local nextColor = "blue"
local lastTeleport = 0
local lastUpdate = 0

---------------------------------------------------------------------
-- üñ•Ô∏è Interface : panneau draggable √† gauche + logs
---------------------------------------------------------------------
local function createUI()
	local gui = Instance.new("ScreenGui")
	gui.Name = "PortalHUD"
	gui.ResetOnSpawn = false
	gui.Parent = player:WaitForChild("PlayerGui")

	local frame = Instance.new("Frame")
	frame.Size = UDim2.new(0, 250, 0.25, 0)
	frame.Position = UDim2.new(0, 10, 0.05, 0)
	frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
	frame.BackgroundTransparency = 0.1
	frame.Parent = gui
	local corner = Instance.new("UICorner", frame)
	corner.CornerRadius = UDim.new(0, 10)

	local title = Instance.new("TextButton")
	title.Size = UDim2.new(1, 0, 0, 30)
	title.Text = "Portal Debug Panel"
	title.Font = Enum.Font.SourceSansBold
	title.TextSize = 14
	title.BackgroundTransparency = 0.3
	title.Parent = frame

	local clear = Instance.new("TextButton")
	clear.Size = UDim2.new(0, 60, 1, 0)
	clear.Position = UDim2.new(1, -65, 0, 0)
	clear.Text = "Clear"
	clear.Parent = title

	local logFrame = Instance.new("ScrollingFrame")
	logFrame.Size = UDim2.new(1, -10, 1, -35)
	logFrame.Position = UDim2.new(0, 5, 0, 35)
	logFrame.BackgroundTransparency = 1
	logFrame.ScrollBarThickness = 6
	logFrame.Parent = frame

	local layout = Instance.new("UIListLayout", logFrame)
	layout.Padding = UDim.new(0, 5)
	layout.SortOrder = Enum.SortOrder.LayoutOrder

	local function log(msg)
		local lbl = Instance.new("TextLabel")
		lbl.Size = UDim2.new(1, -10, 0, 16)
		lbl.Text = tostring(msg)
		lbl.TextSize = 12
		lbl.TextColor3 = Color3.fromRGB(220,220,220)
		lbl.Font = Enum.Font.SourceSans
		lbl.BackgroundTransparency = 1
		lbl.TextXAlignment = Enum.TextXAlignment.Left
		lbl.Parent = logFrame
		logFrame.CanvasSize = UDim2.new(0,0,0,layout.AbsoluteContentSize.Y + 10)
	end

	clear.MouseButton1Click:Connect(function()
		for _, c in pairs(logFrame:GetChildren()) do
			if c:IsA("TextLabel") then c:Destroy() end
		end
	end)

	-- Drag
	local dragging, dragStart, startPos
	title.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = true
			dragStart = input.Position
			startPos = frame.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then dragging = false end
			end)
		end
	end)
	UserInputService.InputChanged:Connect(function(input)
		if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
			local delta = input.Position - dragStart
			frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
		end
	end)

	return { log = log }
end

local ui = createUI()

local function notify(t, m)
	pcall(function()
		StarterGui:SetCore("SendNotification", { Title = t; Text = m; Duration = 3 })
	end)
	ui.log(("[%s] %s"):format(t, m))
end

---------------------------------------------------------------------
-- üî® Fonctions utilitaires
---------------------------------------------------------------------
local function getPortalCFrame(position, normal)
	local worldUp = Vector3.new(0,1,0)
	local dot = math.abs(normal:Dot(worldUp))
	local up = (dot > 0.95) and Vector3.new(0,0,1) or worldUp
	local right = normal:Cross(up).Unit
	up = right:Cross(normal).Unit
	return CFrame.fromMatrix(position, right, up, -normal)
end

local function createPortal(color, pos, normal)
	-- Supprimer ancien
	if portals[color] and portals[color].Part then portals[color].Part:Destroy() end

	local p = Instance.new("Part")
	p.Size = PORTAL_SIZE
	p.Anchored = true
	p.CanCollide = false
	p.Material = Enum.Material.SmoothPlastic
	p.Color = (color == "red") and Color3.fromRGB(255,80,80) or Color3.fromRGB(90,140,255)
	p.CFrame = getPortalCFrame(pos, normal)
	p.Parent = workspace

	local gui = Instance.new("SurfaceGui")
	gui.Face = Enum.NormalId.Front
	gui.SizingMode = Enum.SurfaceGuiSizingMode.PixelsPerStud
	gui.AlwaysOnTop = true
	gui.Parent = p

	local view = Instance.new("ViewportFrame")
	view.Size = UDim2.new(1,0,1,0)
	view.BackgroundColor3 = Color3.fromRGB(10,10,10)
	view.BackgroundTransparency = 0
	view.Parent = gui

	local cam = Instance.new("Camera")
	cam.Parent = view
	view.CurrentCamera = cam

	portals[color] = { Part = p, View = view, Camera = cam, Normal = normal }
	local other = (color == "red") and portals.blue or portals.red
	if other and other.Part then
		portals[color].Other = other
		other.Other = portals[color]
	end

	ui.log(("Placed %s portal at %.1f, %.1f, %.1f"):format(color, pos.X, pos.Y, pos.Z))
end

---------------------------------------------------------------------
-- üîÅ Update loop (view)
---------------------------------------------------------------------
RunService.RenderStepped:Connect(function(dt)
	lastUpdate += dt
	if lastUpdate < VIEW_UPDATE_RATE then return end
	lastUpdate = 0

	for _, portal in pairs(portals) do
		if portal.Other and portal.Part and portal.View and portal.Camera then
			local rel = portal.Other.Part.CFrame:ToObjectSpace(camera.CFrame)
			portal.Camera.CFrame = portal.Part.CFrame * rel
			portal.View.BackgroundTransparency = 1
		elseif portal.View then
			portal.View.BackgroundTransparency = 0
		end
	end
end)

---------------------------------------------------------------------
-- üåÄ T√©l√©portation
---------------------------------------------------------------------
local function tryTeleport(part)
	local char = player.Character
	if not char then return end
	local hrp = char:FindFirstChild("HumanoidRootPart")
	if not hrp or tick() - lastTeleport < TELEPORT_COOLDOWN then return end

	for _, portal in pairs(portals) do
		if portal.Part and portal.Other and (hrp.Position - portal.Part.Position).Magnitude < 4 then
			lastTeleport = tick()
			local rel = portal.Part.CFrame:Inverse() * hrp.CFrame
			local newCF = portal.Other.Part.CFrame * rel + TELEPORT_OFFSET
			hrp.CFrame = newCF
			notify("Portal", "T√©l√©port√© √† travers le portail !")
		end
	end
end

RunService.Heartbeat:Connect(function()
	local char = player.Character
	if char and char:FindFirstChild("HumanoidRootPart") then
		tryTeleport(char.HumanoidRootPart)
	end
end)

---------------------------------------------------------------------
-- üñ±Ô∏è Input (clic / mobile tap)
---------------------------------------------------------------------
local function onClick()
	local ray = workspace:Raycast(camera.CFrame.Position, camera.CFrame.LookVector * 500, RaycastParams.new())
	if not ray then
		notify("PortalGun", "Aucune surface d√©tect√©e.")
		return
	end

	local color = nextColor
	local normal = ray.Normal
	local pos = ray.Position
	createPortal(color, pos, normal)
	nextColor = (color == "red") and "blue" or "red"
end

UserInputService.InputBegan:Connect(function(input, gpe)
	if gpe then return end
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		onClick()
	end
end)

---------------------------------------------------------------------
-- üöÄ Init
---------------------------------------------------------------------
notify("PortalGun", "Syst√®me charg√© ‚Äî touchez ou cliquez pour tirer un portail.")
ui.log("PortalGun pr√™t ‚úÖ")
